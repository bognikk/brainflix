Functional Requirements
Clicking the BrainFlix Logo must link back to the home page (the page with the default video - BMX from Sprint 1).
There must be 3 routes:
The Home/Video Player Page for displaying the details of a video.
The Video Upload Page.
A route that will load the video with the provided video id to be displayed using the Video Player Page.
Clicking on a video in the “Next Video” list must go to the Video Details Page for the selected video via routing and display all the information for the video such as (likes, views, author, comments, etc).
Clicking on the “Upload” button must link to the Video Upload Page.
Visual Design Requirements
The site must be responsive at and between breakpoints. It must closely resemble the mockups in the design package.
Implementation Requirements
Your project must follow the proper folder structure and naming convention outlined in the project guidelines.
The site must make use of the provided assets.
The app must use multiple React components as discussed in class.
The app must use react-router with multiple routes, one for each page.
The project's CSS must use SASS variables.
The CSS must use BEM principles when naming classes.
The site should use Flexbox for layout control.
Main Video Page
Home page and Video Details page should use the same Page Component, and use two separate routes, one for home and the other for a selected video. Think of a unique property of a video object that you could incorporate into your route definition.
You must use the componentDidUpdate lifecycle method and match.params from react-router to determine when to update the main video data.
Clicking on a video thumb in the side-videos section should update the URL. Do not use a click handler to update state for this scenario. This means you need to refactor Sprint 1 functionality to utilize the React Router for this Sprint.
Video Upload Page
The Video Upload Page must match the provided mockup. Upload functionality is not required for this sprint.
After form submission, it should notify about “upload” and redirect to a home page with the default video selected.
Video API
Data displayed in the app must be retrieved from the provided mock API using axios.
The site must use the provided API to retrieve the video links and video details.
Hint: Use component lifecycle methods
The site must use the comments provided with the video details response.
All data for videos and comments must come from the provided mock API.
Diving Deeper
Diving Deeper challenges should only be attempted if all project requirements are met and adding Diving Deeper challenges do not conflict with the existing requirements. The following are suggestions that you can try to take your understanding deeper and go above and beyond the basic requirements.
Posting Comments
To add another layer of functionality to the site, try adding the ability to post and delete comments. Please refer to the "Diving Deeper" design package for sprint 2 for an ideal visual implementation. Regarding the technical implementation, the following requirements should be met:

When posting a comment, ensure that the page does not refresh.
You must POST a comment to the API.
If successful in posting the comment, render the new comment by sending a new request for the "Main Video" data.
After deleting a comment using the API endpoint, your comment section should update without refreshing the browser.